@inherits ComponentBase
@typeparam IItem
<ul class="tv">
    @foreach (var item in Dependents)
    {
        item.Depth = Depth;
        bool hasChildren = (item.Dependents != null && item.Dependents.Any());
        var children = item.Dependents as IEnumerable<INodeItem<IItem>>;
        IItem contentItem = (IItem)item;
        if (hasChildren && item.State == NodeState.Expanded)
        {
            <li class="tv-node">
                @if (OpenSelectedContent != null && (TreeSelection?.IsSelected(contentItem) ?? false))
                {
                    @OpenSelectedContent(contentItem)
                }
                else
                {
                    @OpenContent(contentItem)
                }
                <TreeView 
                    Dependents="children" 
                    OpenContent="OpenContent" 
                    OpenSelectedContent="OpenSelectedContent" 
                    ClosedContent="ClosedContent" 
                    ClosedSelectedContent="ClosedSelectedContent" 
                    Depth="(Depth + 1)" />
            </li>
        }
        else
        {
            <li class="tv-node">
                @if (ClosedSelectedContent != null && (TreeSelection?.IsSelected(contentItem) ?? false))
                {
                    @ClosedSelectedContent(contentItem)
                }
                else
                {
                    @ClosedContent(contentItem)
                }
            </li>
        }
    }
</ul>
@functions
{
  [Parameter] public IEnumerable<INodeItem<IItem>> Dependents { get; set; }
  [Parameter] public RenderFragment<IItem> OpenContent { get; set; }
  [Parameter] public RenderFragment<IItem> OpenSelectedContent { get; set; }
  [Parameter] public RenderFragment<IItem> ClosedContent { get; set; }
  [Parameter] public RenderFragment<IItem> ClosedSelectedContent { get; set; }
  [Parameter] public int Depth { get; set; }

  // This may or may not be provided by the consumer 
  // If it is, we will use it to decide which RenderFragment to display
  [CascadingParameter] ITreeSelection<IItem> TreeSelection { get; set; }
}
