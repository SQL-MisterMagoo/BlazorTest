@using Microsoft.AspNetCore.Identity
@using BlazorTest.Server.Areas.Identity.Data
@using Microsoft.AspNetCore.Blazor.Services
@using System.Security.Claims
@using Microsoft.Extensions.Options
@inject SignInManager<BlazorTestServerUser> SignInManager
@inject UserManager<BlazorTestServerUser> UserManager

@if (User != null && SignInManager.IsSignedIn(User))
{
    <ul class="nav navbar-nav navbar-right">
        <li>
            <a asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
        </li>
        <li>
            <button class="btn btn-link navbar-btn navbar-link" onclick="@Logout">Logout</button>
        </li>
    </ul>
}
else
{
    <ul class="nav navbar-nav navbar-right">
        <li><a asp-area="Identity" asp-page="/Account/Register">Register</a></li>
        <li><a asp-area="Identity" asp-page="/Account/Login">Login</a></li>
    </ul>
}

@functions
{
  [Inject] BlazorTestServerUser user { get; set; }
  [Inject] IUriHelper uriHelper { get; set; }
  [Inject] IOptions<IdentityOptions> optionsAccessor { get; set; }


  ClaimsPrincipal User;

  protected override void OnInit()
  {
      base.OnInit();
      var cpf = new UserClaimsPrincipalFactory<BlazorTestServerUser>(UserManager,optionsAccessor);
      try
      {
          User = cpf.CreateAsync(user)?.Result;
      }
      catch (Exception)
      {
      }
  }
  void Logout()
  {
      uriHelper.NavigateTo("/Logout");
  }
}