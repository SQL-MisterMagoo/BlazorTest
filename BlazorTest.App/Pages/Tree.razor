@page "/treeview"
@using BlazorTree
@using GenFu

<h2>You have @Friends friends - you like @TreeSelection.GetSelected().ToList().Count of them.</h2>

<!-- The CascadingValue is used in the BlazorTree component to decide which ContentFragment to display -->
<CascadingValue Value=@TreeSelection>
    <TreeView Dependents="People" Context="person">
        <ClosedContent>
            <span class="oi oi-plus" @onclick="()=>OnClick(person)"> @(person.Firstname) @(person.Lastname) (@(person.Age)) </span>
            <span @onclick="() => { TreeSelection.Select(person, false); StateHasChanged(); }" title="Click to like" style="opacity: 0.2; cursor:pointer">🖤</span>
        </ClosedContent>
        <ClosedSelectedContent>
            <span class="oi oi-plus" @onclick="() => OnClick(person)"> @(person.Firstname) @(person.Lastname) (@(person.Age)) </span>
            <span @onclick="() => { TreeSelection.Select(person, false); StateHasChanged(); }" title="Click to un-like" style="cursor:pointer">💚</span>
        </ClosedSelectedContent>
        <OpenContent>
            <span class="oi oi-minus" @onclick="()=>OnClick(person)"> @(person.Firstname) @(person.Lastname) (@(person.Age)) </span>
            <span @onclick="() => { TreeSelection.Select(person, false); StateHasChanged(); }" title="Click to like" style="opacity: 0.2; cursor:pointer">🖤</span>
        </OpenContent>
        <OpenSelectedContent>
            <span class="oi oi-minus" @onclick="() => OnClick(person)"> @(person.Firstname) @(person.Lastname) (@(person.Age)) </span>
            <span @onclick="() =>  { TreeSelection.Select(person, false); StateHasChanged(); }" title="Click to un-like" style="cursor:pointer">💚</span>
        </OpenSelectedContent>
    </TreeView>
</CascadingValue>

@code
{
  List<Person> People;
  TreeSelection<Person> TreeSelection;
  int Friends;
  Random count;
  protected override void OnInitialized()
  {
      base.OnInitialized();
      count = new Random();
      Person head = new Person() { Depth = 0 };
      TreeSelection = new TreeSelection<Person>();
      AddDependents(head);
      People = head.Dependents.ToList();
  }
  public class Person : INodeItem<Person>
  {
      public string Lastname { get; set; }
      public string Firstname { get; set; }
      public int Age { get; set; }
      public IEnumerable<Person> Dependents { get; set; }
      public int Depth { get; set; }
      public NodeState State { get; set; }
  }
  void OnClick(Person person)
  {
      person.State = person.State == NodeState.Collapsed ? NodeState.Expanded : NodeState.Collapsed;
  }
  void AddDependents(Person person)
  {

      if (person.Depth > 2) return;
      person.Dependents = A.ListOf<Person>(count.Next(1, 3));
      Friends += person.Dependents.Count();
      foreach (Person person2 in person.Dependents)
      {
          person2.Depth = person.Depth + 1;
          AddDependents(person2);
      }
      if (count.Next(3) == 1)
          TreeSelection.Select(person, false);

  }
}